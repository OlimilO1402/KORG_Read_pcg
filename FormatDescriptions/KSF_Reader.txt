 David Baird (unpaid_p10l) schrieb:
@ 2007-01-27 16:49:00 


       
 

Parser/Reader for Korg KMP and KSF Files

Once upon a universe (overlapping with our very own), in a parallel time when I was supposed to be working on embedded control systems and combinatorial optimization, something else happened instead.

// 2007-01-24 08:36:20 UTC  David Baird <dbaird@nmt.edu>
//
// To compile:
//
// make LDFLAGS=-lsndfile myprogram
//
// Written one cold night in January when I was supposed to be
// working on my homework instead.
//
// Parses .KMP and .KSF files as [sort of] described in documents
// such as this one:
//
// http://www.korg.com/downloads/pdf/TrinityPBSmanual.pdf
//
// After parsing, libsndfile is uses to convert the audio data
// into a .wav/RIFF format.

#include <netinet/in.h> // for ntohl
#include <assert.h>

#include <iostream>
#include <fstream>
#include <list>
#include <string>

#include <sndfile.h>

class KMPData
{
  public:
    // MLP1 chunk:
    std::string sample_name;
    uint8_t n_samples;
    uint8_t attributes;

    // MN01 chunk: ??

    // RLP1 chunk:
    enum { transpose, non_transpose } original_key_type;
    uint8_t original_key;
    uint8_t top_key;
    int8_t tune; // -99..+99 cents
    int8_t level; // -99..+99 cents
    uint8_t pan; // 0..127 (current unused...?)
    int8_t filter_cutoff; // -50..0 (current unused...?)
    std::list<std::string> ksf_filenames;
    typedef std::list<std::string>::iterator ksf_filenames_iterator;
    // NOTE: the following filenames have special meanings:
    //       - SKIPPEDSAMPL
    //       - INTERNALnnnn

    // RLP2 chunk: ??
  public:
    KMPData (void) {}
    static KMPData *fromIStream (std::istream *x);

    std::string to_s (void);
};

class KSFData
{
  public:
    // SMP1 chunk:
    uint32_t smp1_sample_size; // 32
    std::string sample_name; // for drums only
    uint8_t default_bank; // 0..3
    uint32_t start_address; // 3-bytes long
    uint32_t start_address2; // 4-bytes long
    uint32_t loop_start_address;
    uint32_t loop_end_address;

    // SNO1 chunk: ??

    // SMD1 chunk:
    uint32_t sampling_frequency; // 48000, etc..
    //uint8_t attributes;
    uint8_t attribute_compression_id; // 4 bits
    uint8_t attribute_compressed; // 1 = true, 0 = false
    uint8_t attribute_no_second_start; // 1 = don't use second start
    uint8_t loop_tune; // -99..+99 cents
    uint8_t number_of_channels; // 1
    uint8_t sample_size; // 8, 16
    uint32_t number_of_frames;
    // FIXME: sample data...
    int16_t *sample_data;

    // SMF1 chunk: ??

  public:
    KSFData (void) {}
    static KSFData *fromIStream (std::istream *x);

    std::string to_s (void);
};

KMPData *
KMPData::fromIStream (std::istream *x)
{
    KMPData *ret = new KMPData ();
    char buf[32];

    {
        // MSP1 chunk:
        uint32_t chunk_size;

        x->read (buf, 4);
        buf[4] = '\0';
        assert (strcmp (buf, "MSP1") == 0);

        x->read ((char *) &chunk_size, 4);
        chunk_size = ntohl (chunk_size);
        assert (chunk_size == 18);

        x->read (buf, 16);
        buf[16] = '\0';
        ret->sample_name = buf;

        x->read ((char *) &ret->n_samples, 1);
        x->read ((char *) &ret->attributes, 1);
        assert (ret->attributes == 0);
        
        // 26 bytes read so far (18 read since reading chunk_size)
    }

    {
        // FIXME: ignore the MN01 chunk...?
    }

    {
        // RLP1 chunk:
        uint32_t chunk_size;
        uint8_t u8;

        // Find the RLP1 chunk:
        buf[0] = buf[1] = buf[2] = buf[3] = buf[4] = '\0';
        while (strcmp (buf, "RLP1") != 0)
          {
            buf[0] = buf[1]; buf[1] = buf[2]; buf[2] = buf[3];
            x->read (buf + 3, 1);
          }

        x->read ((char *) &chunk_size, 4);
        chunk_size = ntohl (chunk_size);
        assert (chunk_size == ret->n_samples * 18u);

        x->read ((char *) &u8, 1);
        ret->original_key_type = (u8 & 0x80) ? non_transpose : transpose;
        ret->original_key = u8 & 0x3f;

        x->read ((char *) &ret->top_key, 1);
        x->read ((char *) &ret->tune, 1);
        x->read ((char *) &ret->level, 1);
        x->read ((char *) &ret->pan, 1);
        x->read ((char *) &ret->filter_cutoff, 1);

        for (int i = 0; i < ret->n_samples; ++i)
          {
            x->read (buf, 12);
            buf[12] = '\0';
            ret->ksf_filenames.push_back (buf);
            x->read (buf, 6); // FIXME: what is this???
          }
    }

    {
        // FIXME: ignore the RLP2 chunk...?
    }

    return ret;
}

std::string
KMPData::to_s (void)
{
    std::string rets;
    char buf[512];

    sprintf (buf, "sample_name=%s\n", this->sample_name.data ()); rets += buf;
    sprintf (buf, "n_samples=%d\n", this->n_samples); rets += buf;
    sprintf (buf, "attributes=%x\n", this->attributes); rets += buf;
    sprintf (buf, "original_key_type=%d\n", this->original_key_type); rets += buf;
    sprintf (buf, "original_key=%d\n", this->original_key); rets += buf;
    sprintf (buf, "top_key=%d\n", this->top_key); rets += buf;
    sprintf (buf, "tune=%d\n", this->tune); rets += buf;
    sprintf (buf, "level=%d\n", this->level); rets += buf;
    sprintf (buf, "pan=%d\n", this->pan); rets += buf;
    sprintf (buf, "filter_cutoff=%d\n", this->filter_cutoff); rets += buf;
    sprintf (buf, "ksf_filenames:\n"); rets += buf;

    ksf_filenames_iterator filename = ksf_filenames.begin ();
    for (int i = 0; i < this->n_samples; ++i)
      {
        sprintf (buf, "  [%d]=%s\n", i, (*filename++).data ()); rets += buf;
      }
    return rets;
}

KSFData *
KSFData::fromIStream (std::istream *x)
{
    KSFData *ret = new KSFData ();
    char buf[32];

    {
        // SMP1 chunk:
        x->read (buf, 4);
        buf[4] = '\0';
        assert (strcmp (buf, "SMP1") == 0);

        x->read ((char *) &ret->smp1_sample_size, 4);
        ret->smp1_sample_size = ntohl (ret->smp1_sample_size);
        assert (ret->smp1_sample_size == 32);

        x->read (buf, 16);
        buf[16] = '\0';
        ret->sample_name = buf;

        x->read ((char *) &ret->default_bank, 1);

        ret->start_address = 0;
        x->read (((char *) &ret->start_address) + 1, 3);
        ret->start_address = ntohl (ret->start_address);
        x->read ((char *) &ret->start_address2, 4);
        ret->start_address2 = ntohl (ret->start_address2);
        x->read ((char *) &ret->loop_start_address, 4);
        ret->loop_start_address = ntohl (ret->loop_start_address);
        x->read ((char *) &ret->loop_end_address, 4);
        ret->loop_end_address = ntohl (ret->loop_end_address);
    }

    {
        // SNO1 chunk: ??
    }

    {
        // SMD1 chunk
        uint32_t chunk_size;
        uint8_t u8;
        uint32_t sample_bytes;

        // Find the SMD1 chunk:
        buf[0] = buf[1] = buf[2] = buf[3] = buf[4] = '\0';
        while (strcmp (buf, "SMD1") != 0)
          {
            buf[0] = buf[1]; buf[1] = buf[2]; buf[2] = buf[3];
            x->read (buf + 3, 1);
          }

        x->read ((char *) &chunk_size, 4);
        chunk_size = ntohl (chunk_size);
        // NOTE: will do an assert on chunk_size a little later...

        x->read ((char *) &ret->sampling_frequency, 4);
        ret->sampling_frequency = ntohl (ret->sampling_frequency);
        assert (   ret->sampling_frequency == 48000u
                || ret->sampling_frequency == 47619u
                || ret->sampling_frequency == 44100u
                || ret->sampling_frequency == 32000u
                || ret->sampling_frequency == 31250u
                || ret->sampling_frequency == 24000u
                || ret->sampling_frequency == 23810u
                || ret->sampling_frequency == 22254u
                || ret->sampling_frequency == 22050u
                || ret->sampling_frequency == 15625u
                || ret->sampling_frequency == 11127u
                || ret->sampling_frequency == 11025u
               );

        x->read ((char *) &u8, 1);
        ret->attribute_compression_id = u8 & 0x0f;
        ret->attribute_compressed = (u8 & 0x10) >> 4;
        ret->attribute_no_second_start = (u8 & 0x20) >> 5;

        x->read ((char *) &ret->loop_tune, 1);
        x->read ((char *) &ret->number_of_channels, 1);
        assert (ret->number_of_channels == 1);
        x->read ((char *) &ret->sample_size, 1);
        assert (   ret->sample_size == 8
                || ret->sample_size == 16
               );

        x->read ((char *) &ret->number_of_frames, 4);
        ret->number_of_frames = ntohl (ret->number_of_frames);

        sample_bytes = ret->number_of_frames
                       * ret->sample_size / 8
                       * ret->number_of_channels;

        /* NOTE: is this assertion valid if the audio samples are
         *       compressed...
         */
        /*
         * Just in case you ever need to debug this assertion, here
         * is a printf for you...
        printf ("%d %d\n", chunk_size, 12u + sample_bytes);
         */
        assert (chunk_size == 12u + sample_bytes);

        ret->sample_data = (int16_t *) malloc (sizeof(int16_t)
                                               * ret->number_of_frames
                                               * ret->number_of_channels);
        for (unsigned int  i = 0; i < (ret->number_of_frames
                                       * ret->number_of_channels); ++i)
          {
            int bytes = ret->sample_size / 8;
            if (bytes == 1)
              {
                int8_t i8;
                x->read ((char *) &i8, bytes);
                ret->sample_data[i] = 256 * i8; // normalize to 16 bits
              }
            else
              {
                int16_t i16;
                x->read ((char *) &i16, bytes);
                i16 = (int16_t) ntohs ((uint16_t) i16);
                ret->sample_data[i] = i16;
              }
          }
    }

    return ret;
}

std::string
KSFData::to_s (void)
{
    std::string rets;
    char buf[512];

    sprintf (buf, "smp1_sample_size=%d\n", this->smp1_sample_size); rets += buf;
    sprintf (buf, "sample_name=%s\n", this->sample_name.data ()); rets += buf;
    sprintf (buf, "default_bank=%d\n", this->default_bank); rets += buf;
    sprintf (buf, "start_address=%d\n", this->start_address); rets += buf;
    sprintf (buf, "start_address2=%d\n", this->start_address2); rets += buf;
    sprintf (buf, "loop_start_address=%d\n", this->loop_start_address); rets += buf;
    sprintf (buf, "loop_end_address=%d\n", this->loop_end_address); rets += buf;

    sprintf (buf, "sampling_frequency=%d\n", this->sampling_frequency); rets += buf;
    sprintf (buf, "attribute_compression_id=%d\n", this->attribute_compression_id); rets += buf;
    sprintf (buf, "attribute_compressed=%d\n", this->attribute_compressed); rets += buf;
    sprintf (buf, "attribute_no_second_start=%d\n", this->attribute_no_second_start); rets += buf;
    sprintf (buf, "loop_tune=%d\n", this->loop_tune); rets += buf;
    sprintf (buf, "number_of_channels=%d\n", this->number_of_channels); rets += buf;
    sprintf (buf, "sample_size=%d\n", this->sample_size); rets += buf;
    sprintf (buf, "number_of_frames=%d\n", this->number_of_frames); rets += buf;

    return rets;
}

int
main ()
{
    using namespace std;
    {
        ifstream file ("12_ST058.KMP");
        KMPData *kmp_data = KMPData::fromIStream (&file);
        cout << kmp_data->to_s () << endl;
    }
    {
        ifstream file ("12_ST058/MS058000.KSF");
        KSFData *ksf_data = KSFData::fromIStream (&file);
        cout << ksf_data->to_s () << endl;
    }

    {
        char *filenames[] =
            {
              "12_ST058/MS058000.KSF",
              "12_ST058/MS058000.KSF",
              "12_ST058/MS058001.KSF",
              "12_ST058/MS058002.KSF",
              "12_ST058/MS058003.KSF",
              "12_ST058/MS058004.KSF",
              "12_ST058/MS058005.KSF",
              "12_ST058/MS058006.KSF",
              "12_ST058/MS058007.KSF",
              "12_ST058/MS058008.KSF",
            };

        ifstream file (filenames[0]);
        KSFData *ksf_data = KSFData::fromIStream (&file);

        SF_INFO sfinfo;
        SNDFILE *sndfile;

        // Open a new file to store audio samples in:
        {
            // (hopefully all the files will have sampling rate
            //  and number of channels identical to the first file)
            sfinfo.samplerate = ksf_data->sampling_frequency;
            sfinfo.channels = ksf_data->number_of_channels;
            sfinfo.format = SF_FORMAT_WAV
                            | SF_FORMAT_PCM_16
                            | SF_ENDIAN_FILE;

            assert (sf_format_check (&sfinfo));
            sndfile = sf_open ("foo.wav", SFM_WRITE, &sfinfo);
            assert (sndfile);
        }

        // Store all the audio samples from the KSF files:
        for (unsigned int i = 0; i < sizeof(filenames) / sizeof(char*); i++)
          {
            // Use libsndfile to save sound into a .wav format:
            ifstream file (filenames[i]);
            KSFData *ksf_data = KSFData::fromIStream (&file);

            {
                sf_count_t x;
                x = sf_writef_short (sndfile, ksf_data->sample_data,
                                     ksf_data->number_of_frames);
                assert (x == ksf_data->number_of_frames);
            }

          }
        sf_close (sndfile);
    }
    return 0;
}
This is a bad thing. It is bad because it means I will get a D on my homework instead of an A. But to look on the good side of things, this can lead to future distractions as I try to create an improved, software-based equivalent of the Korg [Trinity-esque] TR-Rack.


